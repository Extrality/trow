syntax = "proto3";
import "google/protobuf/timestamp.proto";

package trow;

message UploadRequest {
  //e.g. "amouat/network-utils", "nginx", "my-org/my-team/my-repo"
  string repo_name = 1;
  //Expect some auth stuff as well later
}

message UploadDetails {
  string uuid = 1;
}

message UploadRef {
  string repo_name = 1;
  string uuid = 2;
}

message BlobRef {
  string repo_name = 1;
  string digest = 2;
}

//At the moment this will be a simple file path, but could evolve in future
message WriteLocation {
  string path = 1;
}

message ManifestWriteDetails {
  string path = 1;
  string uuid = 2;
}


//Could have a single "Location", but this allows divergence in the future
message BlobReadLocation {
  string path = 1;
}

//At the moment this will be a simple file path, but could evolve in future
message CompleteRequest {
  string repo_name = 1;
  string uuid = 2;
  string user_digest = 3;
}

message CompletedUpload {
  string digest = 1;
}

message ManifestRef {
  string repo_name = 1;
  //Can be digest or tag
  string reference = 2;
}

message VerifyManifestRequest {
  ManifestRef manifest = 1;
  string uuid = 2;

}
message VerifiedManifest {
  string digest = 1;
  //Version of manifest, used for media type return
  string content_type = 2;
}

message ManifestReadLocation {
  string digest = 1;
  //For the moment path to file
  string path = 2;
  //Version of manifest, used for media type return
  string content_type = 3;
}

message CatalogRequest {
  uint32 limit = 1;
  string last_repo = 2;
}

message ListTagsRequest {
  string repo_name = 1;
  uint32 limit = 2;
  string last_tag = 3;
}

message CatalogEntry {
  string repo_name = 1;
}

message Tag {
  string tag = 1;
}

message BlobDeleted {}
message ManifestDeleted {}

message ManifestHistoryRequest {
  string repo_name = 1;
  //Always tag, not digest
  string tag = 2;

  //For pagination can pass the last digest we saw and how many results we want
  uint32 limit = 3;
  string last_digest = 4;
}

message ManifestHistoryEntry {
  string digest = 1;
  google.protobuf.Timestamp date = 2;

}

message HealthRequest {}


//Unhealthy Status is indicated by return code e.g. unavailableh
message HealthStatus {
  string message = 1;
}

message ReadinessRequest {}

//Not Ready Status is indicated by return code e.g. unavailable
message ReadyStatus {
  string message = 1;
}

message MetricsRequest {}

message MetricsResponse {
  string metrics = 1;
}

//TODO: can we type digests and references so that we can control if it's a digest or tag?

service Registry {

  //Note UUID is really just a reference number, doesn't have to be a UUID. Blame Docker.
  //Assigns a "UUID" to a Upload that is then used to track it

  rpc RequestUpload (UploadRequest) returns (UploadDetails) {}

  //Given a UUID, return where to write the upload to
  //For the moment this is just a file path

  rpc GetWriteLocationForBlob (UploadRef) returns (WriteLocation) {}

  //Given a digest and repo, get the download

  rpc GetReadLocationForBlob (BlobRef) returns (BlobReadLocation) {}

  rpc DeleteBlob(BlobRef) returns (BlobDeleted) {}

  rpc DeleteManifest(ManifestRef) returns (ManifestDeleted) {}

  //Given a UUID, return where to write the upload to
  //For the moment this is just a file path

  rpc GetWriteDetailsForManifest (ManifestRef) returns (ManifestWriteDetails) {}

  rpc GetReadLocationForManifest (ManifestRef) returns (ManifestReadLocation) {}

  //Check the blobs exist and the digest is correct etc

  rpc VerifyManifest (VerifyManifestRequest) returns (VerifiedManifest) {}

  // Called once all blobs and manifest has been uploaded
  // Returns _server_ digest, which may differ to the _user_ digest (due to compression alg)

  rpc CompleteUpload (CompleteRequest) returns (CompletedUpload) {}

  rpc GetCatalog (CatalogRequest) returns (stream CatalogEntry) {}

  rpc ListTags (ListTagsRequest) returns (stream Tag) {}

  rpc GetManifestHistory(ManifestHistoryRequest) returns (stream ManifestHistoryEntry) {}

  // Health and Readiness Checks
  rpc IsHealthy(HealthRequest) returns (HealthStatus) {}

  rpc IsReady (ReadinessRequest) returns (ReadyStatus) {}

  // Metrics
  // Handle metrics
  rpc GetMetrics (MetricsRequest) returns(MetricsResponse) {}
}

/* These types are largely stripped down versions of the Kubernetes types.
 * In future, we could directly use k8s types, but I'd rather leave that to a higher level.
 */
message AdmissionRequest {
  repeated string images = 1;
  string namespace = 2;
  // Used by mutation webhook
  repeated string image_paths = 3;
  string host_name = 4;
}

message AdmissionResponse {
  bool is_allowed = 1;
  string reason = 2;
  // only used for mutation
  optional bytes patch = 3;
}

service AdmissionController{
  rpc ValidateAdmission (AdmissionRequest) returns (AdmissionResponse) {}
  rpc MutateAdmission (AdmissionRequest) returns (AdmissionResponse) {}
}
